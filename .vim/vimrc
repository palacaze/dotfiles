" Vim configuration file
" Maintainer:   Pierre-Antoine Lacaze


"{{{            Generic Settings - 1st part
"-----------------------------------------------
scriptencoding utf-8
set nocompatible
set history=1000
set viminfo='1000,:1000,/1000
let g:showfuncctagsbin = "ctags"
set shellslash  " use normal slash for pathes under win32
"}}}

"{{{            Pathes & Backups
 "-----------------------------------------------
let g:my_vimfiles_dir = has('win32') ? expand($VIM) . "/vimfiles" : "~/.vim"
let s:my_cache_dir    = expand(g:my_vimfiles_dir) . "/cache"
let s:my_backupdir    = expand(s:my_cache_dir) . "/backup//"
let s:my_directory    = expand(s:my_cache_dir) . "/swap//"
let s:my_undodir      = expand(s:my_cache_dir) . "/undo//"

if !isdirectory(s:my_cache_dir)
    call mkdir(s:my_cache_dir)
endif
if !isdirectory(s:my_backupdir)
    call mkdir(s:my_backupdir)
endif
if !isdirectory(s:my_directory)
    call mkdir(s:my_directory)
endif
if !isdirectory(s:my_undodir)
    call mkdir(s:my_undodir)
endif

let &backupdir = expand(s:my_backupdir)
let &directory = expand(s:my_directory)
let &undodir   = expand(s:my_undodir)

set backup " make a backup file
set writebackup
set swapfile
set undofile
set undolevels=1000
set undoreload=10000
"}}}

"{{{            Plugins management
let &runtimepath .= ',' . expand(g:my_vimfiles_dir) . "/bundle/neobundle.vim/"
call neobundle#rc(expand(g:my_vimfiles_dir) . "/bundle/")

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" Asynchronous execution library
NeoBundle 'Shougo/vimproc', {
    \ 'build' : {
    \     'windows' : 'make -f make_mingw32.mak',
    \     'mac' : 'make -f make_mac.mak',
    \     'unix' : 'make -f make_unix.mak'
    \    },
    \ }

" A fast, as-you-type, fuzzy-search code completion engine for Vim
NeoBundle 'Valloric/YouCompleteMe', {
    \ 'build' : {'unix' : 'sh ~/.vim/ycm_build.sh' }}

" Syntax checking hacks for vim
NeoBundle 'scrooloose/syntastic'

" Vim plugin for the_silver_searcher, 'ag'
NeoBundle 'rking/ag.vim'

" An implementation of TextMates Snippets for the Vim Text Editor
NeoBundle 'palacaze/ultisnips'

" Vim motions on speed!
NeoBundle 'Lokaltog/vim-easymotion'

" The ultimate vim statusline utility.
NeoBundle 'Lokaltog/vim-powerline'

" Automatically close quotes, parenthesis, braces, and other delimiters.
NeoBundle 'Raimondi/delimitMate'

" Alternate files quickly (.h --> .c)
NeoBundle 'a.vim'

" File explorer
NeoBundle 'scrooloose/nerdtree'

" Better matching with %.
NeoBundle 'matchit.zip'

" Fix repeat in a number of plugins.
NeoBundle 'tpope/vim-repeat'

" Epic automated alignment.
NeoBundle 'godlygeek/tabular'

" Awesome Git wrapper.
NeoBundle 'tpope/vim-fugitive'

" A fuzzy file-finder, mru switcher, buffer finder, and more
NeoBundle 'kien/ctrlp.vim'

" commentary.vim: comment stuff out
NeoBundle 'tpope/vim-commentary'

" A source code browser plugin for Vim
NeoBundle 'majutsushi/tagbar'

" Better rainbow paraentheses
NeoBundle 'kien/rainbow_parentheses.vim'

" Use the power of vim to rename groups of files
NeoBundle 'renamer.vim'

" syntax for qmake tool from QT
NeoBundle 'qmake--syntax.vim'

" syntax for ispc language
NeoBundle 'https://raw.github.com/ispc/ispc/master/contrib/ispc.vim', {'script_type' : 'syntax'}

" Hints for C library Functions - man 2
NeoBundle 'vim-scripts/Hints-for-C-Library-Functions'

" Hints for C library Functions - man 3
NeoBundle 'vim-scripts/Hints-for-C-Library-Functions-B'

" Syntax highlighting for C library functions and constants 
NeoBundle 'clibs.vim'


" Quicktask is a lightweight Vim task management plugin
NeoBundle 'xolox/vim-notes'
NeoBundleCheck
" }}}

"{{{            Generic Settings - 2nd part
"-----------------------------------------------
filetype on
filetype plugin on
filetype indent on
"}}}

"{{{            Colors
"----------------------------------------------
if !has('win32')
    set termencoding=utf-8
endif

if &term =~ '256color'
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
    set t_ut=
endif

if has('gui_running') || &t_Co > 2
    syntax on
    set background=dark
    set popt+=syntax:y " syntax when printing

    if $COLORTERM == "gnome-terminal" || $TERM == "screen-256color"
       \ || $TERM == "rxvt-unicode"   || $TERM == "rxvt-unicode-256color"
        set t_Co=256
        " bar cursor in insert mode, for this to work rxvt-unicode must be patched
        let &t_SI = "\033]12\007\033[5 q"
        let &t_EI = "\033]12\007\033[0 q"
        colorscheme macarons
    elseif has('gui_running') || &t_Co >= 88
        colorscheme macarons
    elseif $TERM == "linux"
        set t_Co=16
        colorscheme desert
    else
        colorscheme desert
    endif

endif
"}}}

"{{{            Fonts
"-----------------------------------------------
if has('win32')
    set guifont=DejaVu_Sans_Mono:h10
elseif has('gui_gtk')
    set guifont=Deja\ Vu\ Sans\ Mono\ 9
endif
"}}}

"{{{            UI behaviour
"-----------------------------------------------
set number
set hidden
set showmatch
set showcmd
set noshowmode
set laststatus=2 " always show the status line

" set cmdheight=2
" minimize size
set winminheight=0
set winminwidth=0

set splitbelow splitright

" attempt to set the default position (and size) on win32
if has('win32')
    winpos 342 0
endif
if has('gui_running')
    set lines=47
    set columns=130
endif

set display+=lastline
set tabpagemax=50

" tab complete menu
set wildmenu
set wildmode=list:longest,full
set wildignore+=*.o,*~,*.bak,*.obj

" no noise, use this trick on visualbell because it is reset in guimode
set noerrorbells
set visualbell t_vb=
if has("autocmd")
    autocmd GUIEnter * set visualbell t_vb=
endif

" avoid Esc key pauses triggered by remapped meta keycodes
set ttimeout timeoutlen=1000 ttimeoutlen=10

" set updatetime=500       " tag preview
set guioptions=imrRbate  " remove useless UI
set shortmess=atI        " remove useless messages
set lazyredraw           " speedup processing
set ttyfast

" Nice window title stolen from ciaranm
if has('title') && (has('gui_running') || &title)
    set titlestring=
    set titlestring+=%f\                     " file name
    set titlestring+=%h%m%r%w                " flags
    set titlestring+=\ -\ %{v:progname}      " program name
    set titlestring+=\ -\ %{substitute(getcwd(),\ $HOME,\ '~',\ '')}  " working directory
endif

" nice tab line
if exists("+showtabline")
    function! MyTabLine()
        let s = ''
        for i in range(tabpagenr('$'))

            " begin tab
	    let s .= '%' . (i + 1) . 'T'
            "number
            let s .= '%1*' . (i + 1) . '%*:'

            " select the highlighting
            if i + 1 == tabpagenr()
                let s .= '%#TabLineSel#'
            else
                let s .= '%#TabLine#'
            endif

            " name of currently selected window inside tab
            let buf_list = tabpagebuflist(i + 1)
            let winnr = tabpagewinnr(i + 1)
	    let buf_name = bufname(buf_list[winnr - 1])
            let buf_type = getbufvar( buf_name, "&buftype")
            if buf_type == 'help'
                let s .= '[H]' . fnamemodify(buf_name, ':t:s/.txt$//')
            elseif buf_type == 'quickfix'
                let s .= '[Q]'
            else
                let disp_name = fnamemodify(buf_name, ':p:t')
                if disp_name == ''
                    let s .= '[No Name]'
                else
                    let s .= disp_name
                endif
            endif

            " count the number of modified buffers inside tab
            let modif = 0
            for b in buf_list
                if getbufvar( b, "&modified")
                    let modif += 1
                endif
            endfor

            if modif > 0
                let s .= '%2*'
                if modif == 1
                    let s .= '[+]'
                else
                    let s .= '[' . modif . '+]'
                endif
                let s .= '%*'
            endif
            if i + 1 < tabpagenr('$')
                let s .= '%#TabLineFill#'
                let s .= ' '
            endif
        endfor
        let s .= '%T%#TabLineFill#%='
        return s
    endfunction
    set showtabline=1
    set tabline=%!MyTabLine()
endif
"}}}

"{{{            Text editing
"-----------------------------------------------
" enable virtual edit in vblock mode, and one past the end
set virtualedit=block,onemore
set backspace=indent,eol,start  " make backspace delete anything

set fileformats=unix,dos,mac
set encoding=utf8

set fileformats=unix,dos,mac
" set fileencoding=utf8     " setting this wrecks havoc

function! <SID>check_pager_mode()
    if exists("g:loaded_less") && g:loaded_less
        set laststatus=0
        set ruler
        set foldmethod=manual
        set foldlevel=99
        set nolist
    endif
endfunction
au VimEnter * :call <SID>check_pager_mode()
set fileencoding=utf8

set formatoptions=tcrqn

let mapleader = ','

set nowrap
set whichwrap=<,>,[,],
set linebreak  " Wrap on words

"display tabs and trailing spaces
" set listchars=tab:▸\ ,trail:⋅,nbsp:⋅,eol:¬
set listchars=tab:>-,trail:.,nbsp:.
set nolist

" indent options
set shiftwidth=4
set softtabstop=4
"set tabstop=4
set autoindent
set smartindent
set expandtab
set smarttab
set cinoptions=t0
"}}}

"{{{            Mouse
"-----------------------------------------------
if !has('gui_running')
    set mouse=a         " enable the mouse even anywhere (in terms)
end
set mousehide           " hide the mouse whilst editing
set clipboard=unnamed   " yank / paste between windows using y and p keys
"}}}

"{{{            Searching
"-----------------------------------------------
set iskeyword+=_,$,@,%,#,-  " those should not be word dividers when searching

set incsearch
set hlsearch

set ignorecase
set smartcase
"}}}

"{{{            Programming
"-----------------------------------------------
" let &tags = expand(MYVIMFILES) . '/tags/tags_gtk,' . expand(MYVIMFILES) . '/tags/tags_opencv,tags;/'
set tags=./tags;

set completeopt=menu,preview,longest
set showfulltag
set foldmethod=marker
"}}}

"{{{            Key Bindings
"-----------------------------------------------

" make meta keys 'work' on terminal vim. For this to work the terminal
" must send escape sequences instead of Alt keycodes
if !has('gui_running')
    set <F13>=x
    map <F13> <M-x>
    map! <F13> <M-x>

    set <F14>=c
    map <F14> <M-c>
    map! <F14> <M-c>
  
    set <F15>=s
    map <F15> <M-s>
    map! <F15> <M-s>
  
    set <F16>=q
    map <F16> <M-q>
    map! <F16> <M-q>
  
    set <F17>=a
    map <F17> <M-a>
    map! <F17> <M-a>
endif

" change annoying behaviours
vnoremap    <BS>            d
inoremap    #               X<BS>#
nmap        q:              :q
noremap     Q               gq
nnoremap    Y               y$

" easy indenting
vnoremap    <               <gv
vnoremap    >               >gv
vmap        <Tab>           >
vmap        <S-Tab>         <

" insert new line without going into insert mode
map         <Enter>         o<ESC>
map         <S-Enter>       O<ESC>

" Space will toggle folds
nnoremap    <space>         za

" Use ALT-S for saving, also in Insert mode
nmap        <C-s>           :update<CR>
vmap        <C-s>           <C-C>:update<CR>
imap        <C-s>           <C-O>:update<CR>
nmap        <M-s>           :update<CR>
vmap        <M-s>           <C-C>:update<CR>
imap        <M-s>           <C-O>:update<CR>

" ALT-Q to close
nmap        <M-q>           :q<CR>
vmap        <M-q>           <C-C>:q<CR>
imap        <M-q>           <C-O>:q<CR>

" comment out lines of code (toggles)
nmap        <silent> <M-x>  gcc
vmap        <silent> <M-x>  gc
imap        <silent> <M-x>  <C-O>gcc
nmap        <silent> <M-c>  gccj
imap        <silent> <M-c>  <C-O>gcc<C-O>j
 
" Align stuff with Tabularize
nmap        <M-a>&          :Tabularize /&<CR>
vmap        <M-a>&          :Tabularize /&<CR>
nmap        <M-a>=          :Tabularize /=<CR>
vmap        <M-a>=          :Tabularize /=<CR>
nmap        <M-a>:          :Tabularize /:<CR>
vmap        <M-a>:          :Tabularize /:<CR>
nmap        <M-a>::         :Tabularize /:\zs<CR>
vmap        <M-a>::         :Tabularize /:\zs<CR>
nmap        <M-a>,          :Tabularize /,<CR>
vmap        <M-a>,          :Tabularize /,<CR>
nmap        <M-a><Bar>      :Tabularize /<Bar><CR>
vmap        <M-a><Bar>      :Tabularize /<Bar><CR>

" tab control
nnoremap    <C-PageUp>      :tabp<CR>
nnoremap    <C-PageDown>    :tabn<CR>
inoremap    <C-PageUp>      <C-O>:tabp<CR>
inoremap    <C-PageDown>    <C-O>:tabn<CR>
nmap        <C-t>           :tabnew<CR>
imap        <C-t>           <C-O>:tabnew<CR>

" window control: moving between windows and resizing
nmap        <C-k>           <C-w>c
map         <S-Up>          <C-w><Up>
imap        <S-Up>          <C-O><C-W><Up>
map         <S-Down>        <C-w><Down>
imap        <S-Down>        <C-O><C-W><Down>
map         <S-Right>       <C-w><Right>
imap        <S-Right>       <C-O><C-W><Right>
map         <S-Left>        <C-w><Left>
imap        <S-Left>        <C-O><C-W><Left>
map         <C-S-Up>        <C-w>2+
imap        <C-S-Up>        <C-O><C-W>2+
map         <C-S-Down>      <C-w>2-
imap        <C-S-Down>      <C-O><C-W>2-
map         <C-S-Right>     <C-w>2>
imap        <C-S-Right>     <C-O><C-W>2>
map         <C-S-Left>      <C-w>2<
imap        <C-S-Left>      <C-O><C-W>2<

nmap        ,e              :exe 'tabe ' . expand(g:my_vimfiles_dir) . '/vimrc'<CR>

" F keys
nnoremap    <silent> <F1>   K
inoremap    <silent> <F1>   <C-O>K

nmap    <silent> <F2>   zm
vmap    <silent> <F2>   <C-C>zm
imap    <silent> <F2>   <C-O>zm
nmap    <silent> <F3>   zr
vmap    <silent> <F3>   <C-C>zr
imap    <silent> <F3>   <C-O>zr


nnoremap    <silent> <F4>   :silent nohlsearch<CR>
inoremap    <silent> <F4>   <C-O>:silent nohlsearch<CR>
nnoremap    <silent> <F5>   :NERDTreeToggle<CR>
inoremap    <silent> <F5>   <C-O>:NERDTreeToggle<CR>
nnoremap    <silent> <F6>   :TagbarToggle<CR>
inoremap    <silent> <F6>   <C-O>:TagbarToggle<CR>


nnoremap    <F7>            :set invpaste paste?<CR>
set pastetoggle=<F7>

nnoremap    <silent><F8>    :A<CR>
inoremap    <silent><F8>    <C-O>:A<CR>

nnoremap    <F9>            :set list!<CR>
inoremap    <F9>            <C-O>:set list!<CR>

nnoremap    <F10>           :RainbowParenthesesToggle<CR>
inoremap    <F10>           <C-O>:RainbowParenthesesToggle<CR>

noremap     <silent> <F11>  :call <SID>StripTrailingSpaces()<CR>
inoremap    <silent> <F11>  <C-O>:call <SID>StripTrailingSpaces()<CR>
vnoremap    <silent> <F11>  <C-C>:call <SID>StripTrailingSpaces()<CR>

nnoremap    <silent> <F12>  :call UpdateTags()<CR>
inoremap    <silent> <F12>  <C-O>:call UpdateTags()<CR>
"}}}

"{{{            Plugins settings
"-----------------------------------------------

" Settings for commentary
autocmd FileType cmake set commentstring=#\ %s
autocmd FileType xdefaults set commentstring=!\ %s
autocmd FileType tmux set commentstring=#\ %s

" Settings for Explorer.vim
let g:explHideFiles='^\.'

" Settings for Netrw
let g:netrw_list_hide='^\.,\~$'

" c specific options
let c_gnu            = 1
let c_no_if0         = 1
let c_syntax_for_h   = 1
" let c_space_errors = 1

" Settings for :TOhtml
let html_number_lines = 1
let html_use_css      = 1
let use_xhtml         = 1

" clibs syntax hightlighting options
let c_hi_identifiers = 'all'
let c_hi_libs        = ['*']

let NERDTreeWinPos     = 'left'
let NERDTreeQuitOnOpen = 1
let NERDTreeMouseMode  = 2

" c/h alter
let g:alternateExtensions_cc = "hh,h,HH,H"
let g:alternateExtensions_CC = "hh,h,HH,H"
let g:alternateExtensions_hh = "cc,c,CC,c"
let g:alternateExtensions_HH = "cc,c,CC,c"

let glib_deprecated_errors = 1

let g:solarized_termtrans = 1
let g:solarized_termcolors = 256

" remove <tab> from the trigger keys because it hinders ultisnips
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_autoclose_preview_window_after_completion = 1

let g:snips_author = "Pierre-Antoine Lacaze"
let g:snips_author_email = "pa.lacaze@laposte.net"

let g:UltiSnipsUsePythonVersion = 2
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snippets"]
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

let g:notes_directory = "~/gentoo/notes"
let g:notes_suffix = '.notes'
let g:notes_title_sync = 'no'
"}}}

"{{{            Functions
"-----------------------------------------------
if has('eval')
    " automatically save tags in appropriate file
    fun! UpdateTags()
        let _ctags_cl_ = 'ctags -N -R --c++-kinds=+p --fields=+iaS --extra=+q -IG_DEFINE_TYPE+ .'
        let _resp_ = system(_ctags_cl_)
    endfun

    runtime! macros/matchit.vim

    " Fonction d'autosauvegarde en cas de buffer modifié
    function! <SID>AutoSave()
        if &modified
            :silent update!
        endif
    endfunction

    " Function removing trailing spaces
    function! <SID>StripTrailingSpaces()
        normal mZ
        silent! %s/\s\+$//e
        normal `Z
    endfunction
endif

"}}}

"{{{            AutoCommands
"-----------------------------------------------
if has('autocmd')
    " turn off any existing search
    au VimEnter * nohlsearch

    " automatically open and close the popup menu / preview window
    au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif

    " cindent for c / c++ files
    au BufNewFile,BufRead *.cpp,*.cc,*.h,*.c,*.hh
                \ setlocal cindent |
                \ runtime! syntax/clibs.vim |
                \ setlocal fmr={,} |
                \ setlocal list |
                \ setlocal expandtab |
                \ setlocal comments-=:// comments+=f://

    au BufNewFile,BufRead *.notes
                \ setlocal foldmethod=manual |
                \ setlocal foldlevel=99 |
                \ setlocal nolist |
                \ setlocal shiftwidth=2 |
                \ setlocal softtabstop=2 |
                \ setlocal laststatus=0 |
                \ highlight notesRealURL ctermfg=blue cterm=underline |
                \ highlight notesTextURL ctermfg=blue cterm=underline |
                \ highlight notesUnixPath ctermfg=magenta cterm=underline

    " we want notes saved automatically
    autocmd CursorHold *.notes call <SID>AutoSave()
    autocmd CursorHoldI *.notes call <SID>AutoSave()

    au FileType text
                \ setlocal textwidth=78 |
                \ setlocal wrap

    " jump to last edited line on opening
    au BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif

    " Don't automatically insert a comment command when entering insert mode with o
    au FileType * setl formatoptions-=o

    " But do when hitting enter on a comment line, or when wrapping
    au FileType * setl formatoptions+=tcrq

    " au syntax * call rainbow_parentheses#activate()

endif
"}}}

" set vbs=1
